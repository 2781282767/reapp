#!/usr/bin/env node

var Program = require('commander');
var colors = require('colors');
var fs = require('fs');
var NodeGit = require('nodegit');
var Repository = NodeGit.Repository;
var clone = NodeGit.Clone.clone;
var rimraf = require('rimraf');
var replace = require('replace');
var Promise = require('bluebird').Promise;

Program
  .parse(process.argv);

var name = Program.args;

if (!name.length) {
  console.log('must give a name after "new" (ex: reapp new myname)'.red);
  process.exit(1);
}

if (name.length > 1) {
  console.log('sorry, we don\'t support multiple names'.red);
  process.exit(1);
}

var name = name[0];

console.log();
console.log('Creating new reapp folder for: %s...'.green, name);

var url = 'git://github.com/reapp/reapp-starter.git';
var dest = process.cwd() + '/' + name;
var opts = {
  bare: true
};

if (fs.existsSync(dest))
  console.log('Error! This directory already exists'.red);
else
  start();

function start() {
  cloneRepo()
    .then(deleteGitFolder)
    .then(initGit)
    .then(replaceGivenNameInApp)
    .then(npmInstall)
    .then(finish);
}

function cloneRepo() {
  return clone(url, dest, opts);
}

function deleteGitFolder() {
  return new Promise(function(resolve, reject) {
    rimraf(dest + '/.git', function(err, data) {
      if (err) return reject(err);
      resolve(data);
    })
  });
}

function initGit() {
  console.log('Initializing git...'.green);
  return Repository.init(dest + '/.git', 0);
}

function replaceGivenNameInApp() {
  return new Promise(function(resolve, reject) {
    console.log('Inserting your name...'.green);
    replace({
      regex: '{{reappName}}',
      replacement: name,
      paths: [dest],
      recursive: true,
      silent: true
    });

    resolve();
  });
}

function npmInstall() {
  return new Promise(function(resolve, reject) {
    console.log('Running npm install...'.green);
    process.chdir(dest);

    var exec = require('child_process').exec, child;
    child = exec('npm install', function(error, stdout, stderr) {
      if (error) reject(error);
      console.log(stdout);
      console.log(stderr);
    });
  });
}

function finish() {
  console.log('Done!'.green.bold);
  console.log();
}