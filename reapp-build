#!/usr/bin/env node

var Program = require('commander');
var colors = require('colors');
var pack = require('reapp-pack');
var makeLayout = require('reapp-pack/lib/makeLayout');
var webpack = require('reapp-pack/webpack');
var webpackCallback = require('reapp-pack/lib/callback');
var makeBuildDir = require('./lib/makeBuildDir');
var checkIsReapp = require('./lib/checkIsReapp');
var fs = require('fs');
var ncp = require('ncp');

Program
  .option('-w, --watch', 'watch for changes')
  .option('-d, --debug', 'output extra information for debugging')
  .parse(process.argv);

var dir = process.cwd();

if (Program.debug) {
  console.log('CLI received opts:'.blue);
  console.log(Program);
  console.log();
}

checkIsReapp(dir);

// user config
var config;

try {
  config = require(dir + '/config/build.config.js');
}
catch(e) {
  var buildConfig = require('reapp-pack/config/build.js');
  config = buildConfig({
    dir: dir,
    linkModules: true,
    debug: Program.debug
  });
}

// html template
var layoutIn = dir + '/assets/layout.html';
var layoutOut = config.output.path + '/index.html';

var layout = makeLayout({
  template: layoutIn,
  scripts: Object.keys(config.entry),
  styles: ['main.css']
});

// build dir
makeBuildDir(dir, run);

// copy layout
fs.writeFile(layoutOut, layout);

// copy icons
ncp(dir + '/node_modules/reapp-ui/assets', dir + '/build/public/assets');

function run() {
  console.log('Building...'.yellow, "\n");

  var compiler = webpack(config, webpackCallback({
    debug: Program.debug
  }));
}