#!/usr/bin/env node

var Program = require('commander');
var colors = require('colors');
var pack = require('reapp-pack');
var webpack = require('reapp-pack/webpack');
var util = require('util');
var buildConfig = require('reapp-pack/config/webpack.build.js');
var makeBuildDir = require('./lib/makeBuildDir');
var checkIsReapp = require('./lib/checkIsReapp');
var resolveAppPath = require('./lib/resolveAppPath');

Program
  .option('-d, --debug', 'output extra information for debugging')
  .option('-c, --config <path>', 'provide a config [path] for webpack')
  .option('--nolink', 'dont link webpack modules to ./server_modules')
  .parse(process.argv);

var dir = process.cwd();

var opts = {
  config: resolveAppPath(dir, Program.config),
  dir: dir,
  debug: !!Program.debug,
  linkModules: !Program.nolink
};

if (opts.debug) {
  console.log('CLI received opts:'.blue);
  console.dir(opts);
  console.log();
}

checkIsReapp(opts.dir);
makeBuildDir(opts.dir, run);

var config = Program.config ?
  require(opts.config) :
  pack(buildConfig, opts);

function run() {
  console.log('Building...'.yellow, "\n");

  webpack(config, function(err, stats) {
    if (err) {
      console.log('Error:');
      console.log(err);
    }
    else {
      var statsObj = stats.toJson({ errorDetails: true });

      if (statsObj.warnings.length) {
        console.log('Had warnings:'.yellow.bold);
        console.log(prettyArr(statsObj.warnings), "\n\n");
      }

      if (statsObj.errors.length) {
        console.log('Had errors:'.red.bold);
        console.log(prettyArr(statsObj.errors), "\n\n");
      }

      console.log('Build complete'.green.bold);

      if (opts.debug) {
        console.log('Stats built to ./build/stats.json'.blue);
      }
    }
  });
}

function prettyArr(arr) {
  var newLines = "\n\n";

  arr.forEach(function(item) {
    if (Array.isArray(item))
      prettyArr(item);

    if (item)
      console.log(item, newLines);
  });
}